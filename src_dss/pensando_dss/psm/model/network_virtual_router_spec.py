"""
    Network API reference

       # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from pensando_dss.psm.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from pensando_dss.psm.model.network_rd_spec import NetworkRDSpec
    globals()['NetworkRDSpec'] = NetworkRDSpec


class NetworkVirtualRouterSpec(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('type',): {
            'UNKNOWN': "unknown",
            'TENANT': "tenant",
            'INFRA': "infra",
        },
    }

    validations = {
        ('maximum_cps_per_network_per_distributed_services_entity',): {
            'inclusive_maximum': 1000000,
            'inclusive_minimum': 0,
        },
        ('maximum_sessions_per_network_per_distributed_services_entity',): {
            'inclusive_maximum': 5000000,
            'inclusive_minimum': 0,
        },
        ('vxlan_vni',): {
            'inclusive_maximum': 16777215,
            'inclusive_minimum': 0,
        },
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'default_ipam_policy': (str,),  # noqa: E501
            'egress_nat_policy': ([str],),  # noqa: E501
            'egress_security_policy': ([str],),  # noqa: E501
            'flow_export_policy': ([str],),  # noqa: E501
            'ingress_nat_policy': ([str],),  # noqa: E501
            'ingress_security_policy': ([str],),  # noqa: E501
            'ipsec_policy': ([str],),  # noqa: E501
            'maximum_cps_per_network_per_distributed_services_entity': (int,),  # noqa: E501
            'maximum_sessions_per_network_per_distributed_services_entity': (int,),  # noqa: E501
            'route_import_export': (NetworkRDSpec,),  # noqa: E501
            'router_mac_address': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'vxlan_vni': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'default_ipam_policy': 'default-ipam-policy',  # noqa: E501
        'egress_nat_policy': 'egress-nat-policy',  # noqa: E501
        'egress_security_policy': 'egress-security-policy',  # noqa: E501
        'flow_export_policy': 'flow-export-policy',  # noqa: E501
        'ingress_nat_policy': 'ingress-nat-policy',  # noqa: E501
        'ingress_security_policy': 'ingress-security-policy',  # noqa: E501
        'ipsec_policy': 'ipsec-policy',  # noqa: E501
        'maximum_cps_per_network_per_distributed_services_entity': 'maximum-cps-per-network-per-distributed-services-entity',  # noqa: E501
        'maximum_sessions_per_network_per_distributed_services_entity': 'maximum-sessions-per-network-per-distributed-services-entity',  # noqa: E501
        'route_import_export': 'route-import-export',  # noqa: E501
        'router_mac_address': 'router-mac-address',  # noqa: E501
        'type': 'type',  # noqa: E501
        'vxlan_vni': 'vxlan-vni',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """NetworkVirtualRouterSpec - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            default_ipam_policy (str): Default IPAM policy for networks belonging to this Virtual Router. Any IPAM Policy specified in the Network overrides this.. [optional]  # noqa: E501
            egress_nat_policy ([str]): NAT Policy to apply in the egress direction On a DSS, a VPC supports only 1 NAT policy per direction. repeated entry is to allow VPC with different NAT policies per PolicyDistributionTarget.. [optional]  # noqa: E501
            egress_security_policy ([str]): Security Policy to apply in the egress direction.. [optional]  # noqa: E501
            flow_export_policy ([str]): FlowExportPolicy is the flow export policy associated to this virtual router.. [optional]  # noqa: E501
            ingress_nat_policy ([str]): NAT Policy to apply in the ingress direction On a DSS, a VPC supports only 1 NAT policy per direction. repeated entry is to allow VPC with different NAT policies per PolicyDistributionTarget.. [optional]  # noqa: E501
            ingress_security_policy ([str]): Security Policy to apply in the ingress direction.. [optional]  # noqa: E501
            ipsec_policy ([str]): IPSecPolicy are IPsec policies to use for this virtual router. An IPSec policy represents a VPN instance connected to a remote site. A virtual router could be associated with multiple IPSec policies representing multiple remote sites. It can have one or more IPsec policies per PolicyDistributionTarget, which means one or more remote sites connected per VRF from the same PolicyDistributionTarget.. [optional]  # noqa: E501
            maximum_cps_per_network_per_distributed_services_entity (int): Maximum Connections Per Second supported for any Network belonging to the Virtual Router within a Distributed Services Entity. Valid values 0 no limit and 1000 <= maxcps  <= 1000000 The value configured here is the CPS limit enforced per Network within a Distributed Services Entity and is the same for all Networks within the Virtual Router. However the value can be overriden at Network level. Value 0 means the CPS limit is not enforced and the CPS is limited only by the system capacity. All new connections exceeding the CPS limit are dropped. Value should be between 0 and 1000000.. [optional]  # noqa: E501
            maximum_sessions_per_network_per_distributed_services_entity (int): Maximum sessions supported in any Network belonging to the Virtual Router within a Distributed Services Entity. Valid values 0 (no limit) and 10000  <= maxsessions <= 5000000 The value configured here is the sessions limit enforced per Network within a Distributed Services Entity and is the same for all Networks within the Virtual Router. However the value can be overriden at Network level. Value 0 means the sessions limit is not enforced and the number of sessions is limited only by the system capacity. Sessions exceeding the sessions limit are dropped. NOTE: no active sessions will be pruned if the value changes, but until the session count comes down to a value below this limit, new sessions won't be installed in h/w (packet will be dropped) 1 session = forward flow + reverse flow. Value should be between 0 and 5000000.. [optional]  # noqa: E501
            route_import_export (NetworkRDSpec): [optional]  # noqa: E501
            router_mac_address (str): Default Router MAC Address to use for this Virtual Router. Should be a valid MAC address.. [optional]  # noqa: E501
            type (str): Type does not apply to DSS.. [optional] if omitted the server will use the default value of "unknown"  # noqa: E501
            vxlan_vni (int): VxlAN VNI for the Virtual Router. Value should be between 0 and 16777215.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
