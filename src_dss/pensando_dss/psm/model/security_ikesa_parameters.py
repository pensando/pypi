"""
    Security API reference

       # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from pensando_dss.psm.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


class SecurityIKESAParameters(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('ikev1_mode',): {
            'MAIN': "main",
            'AGGRESSIVE': "aggressive",
        },
    }

    validations = {
        ('pre_shared_key',): {
            'min_length': 20,
        },
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'dh_groups': ([str],),  # noqa: E501
            'dpd_delay': (str,),  # noqa: E501
            'encryption_algorithms': ([str],),  # noqa: E501
            'hash_algorithms': ([str],),  # noqa: E501
            'ike_initiator': (bool,),  # noqa: E501
            'ikev1_dpd_timeout': (str,),  # noqa: E501
            'ikev1_mode': (str,),  # noqa: E501
            'pre_shared_key': (str,),  # noqa: E501
            'reauth_lifetime': (str,),  # noqa: E501
            'rekey_lifetime': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'dh_groups': 'dh-groups',  # noqa: E501
        'dpd_delay': 'dpd-delay',  # noqa: E501
        'encryption_algorithms': 'encryption-algorithms',  # noqa: E501
        'hash_algorithms': 'hash-algorithms',  # noqa: E501
        'ike_initiator': 'ike-initiator',  # noqa: E501
        'ikev1_dpd_timeout': 'ikev1-dpd-timeout',  # noqa: E501
        'ikev1_mode': 'ikev1-mode',  # noqa: E501
        'pre_shared_key': 'pre-shared-key',  # noqa: E501
        'reauth_lifetime': 'reauth-lifetime',  # noqa: E501
        'rekey_lifetime': 'rekey-lifetime',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """SecurityIKESAParameters - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            dh_groups ([str]): [optional]  # noqa: E501
            dpd_delay (str): DPDDelay is how often a liveness probe is sent for dead peer detection (DPD). Default is 60 seconds. Empty value disables DPD. A duration string is a sequence of decimal number and a unit suffix, such as \"24h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"Âµs\"), \"ms\", \"s\", \"m\", \"h\". The actual delay between detecting a dead peer and tearing down the tunnel depends on the configured retransmission timers in strongswan which currently is set at one retry every 5s for a total of 5 retries. The tunnel will be cleaned up after the retransmissions are done and will not be setup again if IkeInitiator is false. Should be a valid time duration between 1m0s and 1h0m0s.. [optional] if omitted the server will use the default value of "60s"  # noqa: E501
            encryption_algorithms ([str]): [optional]  # noqa: E501
            hash_algorithms ([str]): HashAlgorithm is used for integrity and PRF(Pseudo Random Function). For authenticated ciphers AES-GCM-128 and AEC-GCM-256 it is used as PRF only.. [optional]  # noqa: E501
            ike_initiator (bool): IkeInitiator dictates if the local node will actively initiate the tunnel after loading the config.. [optional] if omitted the server will use the default value of False  # noqa: E501
            ikev1_dpd_timeout (str): IKEv1DPDTimeout is the timeout for dead peer detection (DPD) after which IKE SA and IPsec SA are terminated. It applies only to IKEv1. A duration string is a sequence of decimal number and a unit suffix, such as \"180s\" or \"2h45m\". Valid time units are \"s\", \"m\", \"h\". Should be a valid time duration between 1m0s and 1h0m0s.. [optional] if omitted the server will use the default value of "180s"  # noqa: E501
            ikev1_mode (str): Mode is IKE negotiation to use, MAIN or AGGRESSIVE, applies to IKEv1.. [optional] if omitted the server will use the default value of "main"  # noqa: E501
            pre_shared_key (str): PreSharedKey can be empty for policy update by user. Existing value is automatically populated when updating policy if is left empty by user. Length of string should be at least 20.. [optional]  # noqa: E501
            reauth_lifetime (str): ReauthLifetime is the time duration after which reauthentication occurs. Default is 24 hours. Empty value disables re-authentication. A duration string is a sequence of decimal number and a unit suffix, such as \"24h\" or \"2h45m\". Valid time units are \"s\", \"m\", \"h\". Reauths default to a break-before-make behavior in IKEv2 and there will be a minor traffic disruption (IKEv1 defaults to make-before-break as the child SA is not recreated, just transferred from the old IKE SA to the new IKE SA). IKE Reauths with PSK authentication provide no benefit over rekeys. It is recommended to disable IKE rekeys if reauth is enabled. Should be a valid time duration between 1h0m0s and 24h0m0s.. [optional] if omitted the server will use the default value of "24h"  # noqa: E501
            rekey_lifetime (str): RekeyLifetime is the time duration after which fresh cryptographic keys are created for IKE SA. Default is 8 hours. Empty value disables re-keying. A duration string is a sequence of decimal number and a unit suffix, such as \"24h\" or \"2h45m\". Valid time units are \"s\", \"m\", \"h\". IKE Rekeys refresh the key materials and don't authenticate the associated credentials. This is supported in IKE v2 only. IKEv1 always performs a reauthentication procedure instead. The actual rekey time range is determined by a rand_time that is equal to 10% of the reauth or rekey time, whichever is larger. Should be a valid time duration between 15m0s and 24h0m0s.. [optional] if omitted the server will use the default value of "8h"  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
